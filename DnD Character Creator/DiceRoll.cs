using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnD_Character_Creator
{
    public class DiceRoll
    {

        public int DiceSides { get; set; }
        public int RandomValue { get; set; }

        public static int Roll(int diceSides)
        {
            //This method simulates a dice roll based on the number of sides instructed.
            Random roll = new Random();
            int result = roll.Next(1, (diceSides + 1));
            return result;
        }

        public static List<int> RollForStats()
        {
            //Getting 6 randomly generated numbers for stats is tricky because there is statistic probability involved in dice rolls. 
            //Instead of randomly generating 6 numbers directly, 4 numbers from 1-6 have to be generated first.
            //It's more likely to get results towards the median of the range than it is for extreme values because more permutations exist.
            //4 six-sided dice rolls with the lowest dropped will probably average around 12.5.

            Console.Clear();
            Console.WriteLine("Each of the 6 scores are generated by rolling 4 D6, dropping the lowest roll, and adding them together. \r\n");
            int[] randomValues = new int[4];
            List<int> processedValues = new List<int>();
            int[] processingValues = new int[6];
            Random roll = new Random();
            foreach (int index in processingValues) //For each of the 6 empty values:
            {
                for (int i = 0; i < 4; i++) //Generates 4 numbers (1-6)
                {
                    int d6 = roll.Next(1, 7);
                    randomValues[i] = d6;
                    Console.Write(d6);
                }
                Console.WriteLine("");
                Array.Sort(randomValues);   //Orders the 4 random numbers
                int result = randomValues[1] + randomValues[2] + randomValues[3]; //Adds all numbers except the lowest.
                processedValues.Add(result);
                Console.WriteLine("Result: " + result + "\r\n");
            }
            processedValues.Sort(); 
            processedValues.Reverse();  //The numbers are sorted from Highest to lowest.
            return processedValues;
        }
    }
}
